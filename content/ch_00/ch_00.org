#+BIBLIOGRAPHY: ../bib plain

\begin{frame}[title={bg=Hauptgebaeude_Tag}]
  \maketitle
\end{frame}

* Introduction 

*** Who are we

 Fachgebiet „Internet-Technologie und Softwarisierung“ (ITSW)
 - Prof. Dr. Holger Karl 
 - holger.karl@hpi.de 
 - K-1.15 
 - Office hours: on demand
 - Web page: https://hpi.de/karl/home.html


*** Main research topics

In general: architectures and protocols of communication systems
 - Structure, design, performance evaluation, implementation, …
 - For all types of communication: computer networks, voice communication, data & multimedia content


*** Teaching FG ITSW                                               :noexport:


#+caption: Teaching at ITWS group, HPI
#+attr_latex: :width 0.95\textwidth :height 0.6\textheight :options keepaspectratio,page=1
#+NAME: fig:teaching 
[[./figures/teaching.pdf]]





* What this class is all about 

*** Distributed system (DS)?

#+BEGIN_QUOTE
 A distributed system is a collection of independent computers that appears to its users as a single coherent system. 			\textendash{} A. S. Tannenbaum
#+END_QUOTE


#+BEGIN_QUOTE
 A distributed computing system consists of multiple autonomous processors that do not share primary memory but cooperate by sending messages over a communication network.
				\textendash{} Henri Bal
#+END_QUOTE
 
#+BEGIN_QUOTE
 A distributed system is one in which the failure of a computer which
 you didn‘t even know existed can render your own computer
 unusable. \textendash{} Leslie Lamport
#+END_QUOTE

*** Crucial aspects of a distributed system

- Autonomy
  - A distributed system consists of autonomous, independent entities (but usually cooperative ones, not antagonistic ones)
  - Each individual entity is – typically – a full-fledged, operational system of its own 

- Transparency 
  - The fact that the distributed system is indeed a conglomerate of different (simpler) systems is of no interest and should be of no concern to the user 

- How to achieve this? 

*** Topics of “Distributed Systems”
 Even assuming many devices can communicate, this is not enough to turn them into a system

 - This class is not about communication as such, 
 - but about how communicating devices can be turned into a useful system
 - It combines 
   - Theoretical/fundamental aspects
   - Practical issues, real-world systems, programming 
   - And tries to explain how and why theoretical aspects are necessary to build systems  

*** Non-Topics of “Distributed Systems”
 This class is not about 
 - Communication protocols – it helps to know the material of the lecture “Rechnernetze” (Computer networks) 
 - Distributed algorithms – treated where necessary, but not in focus
 - Parallel computing (hardware or software) – treated occasionally in passing
 - Programming 


*** Crucial aspects of distributed systems 


- *Autonomy*
  - Entities in a distributed system are autonomous, independent
    entities
  - But cooperative, not antagonistic
#+BEAMER: \pause
- *Transparency* 
  - Distributed as such not of interest to user
  - Should be hidden from user: distribution is invisible,
    *transparent* 


*** Structure  of this class 


#+CAPTION: Structure of this class
#+NAME: fig:structure_class 
[[./figures/structure.pdf]]


* An example for this class: FND                                   :noexport:

*** Fake News Detector 



- Fake News, online rumours: Danger to society

- German government issues call for tender: Build an Internet-scale
  *Fake News Detector* (FND)

  - Based on recent breakthroughs in artificial intelligence, machine
    learning, ... 

- Real-time surveillance of all social media sites 

- Goal: Identify and prosecute publishers of fake news 

*** Requirements 


**** Requirements                                                     :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.6
     :END:

- Posts in all social media platforms needs to be checked 

- Super-smart artificial intelligence algorithms will analyze,
  cross-correlate postings

- New algorithms should be deployable quickly by Federal agents

- Analysis results need to be made available to Federal agents via
  arbitrary devices (e.g., WebBrowsers or scripts for further
  analysis) 


**** Figure                                                           :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.4
     :END:


#+CAPTION: FAD stakeholders
#+ATTR_LaTeX: :width 0.9\linewidth
#+NAME: fig:FAD
[[../ch_03_RPC_CS/figures/FAD.pdf]]

*** Quantitative Requirements 

Some numbers 

- 0.5 billion user accounts to be analyzed 

- One user produces 320 bytes every 10 minutes, on average

- Output rate can surge dramatically during events of public interest

- Each post has to be tagged as fake/not fake, within maximum 5
  seconds 

- Upon detection of a fake news item, workload is expected to increase
  dramatically 

- Maximum acceptable outage time: 1 minute

- Minimum steady-state availability: 99.9 % 


*** FAD Challenges 

- HUGE scale
  - No single system able to handle that
- Many systems needed 
- Results in
  - Concurrent execution
  - Failures
  - No consistent notion of time  (no global clock) 


* Organization, exam, material

*** Lecture 

- Current plan: Classic in-person lectures + homework assignments
  - Supported by recordings (video + screen), but *no guarantees*
  - Supported by pre-recorded screencasts (from an older instance):
    [[https://www.youtube.com/playlist?list=PLcVYkCRLcLtGHzfmkfYjdN8Ai9tkHaHvi][YouTube Playlist]]
  - Slides, handwritten notes, ... will all be provided via Moodle


*** Time slots 

- *Currently*:
  - ... ??? 
- We can try to find better alternatives! 


*** Homework assignments
 “Conventional” homework assignments 
 - This lecture will also include some practical exercises 
 - Assignments will be discussed in “Tafelübung”; they will not be graded or used for bonus points, … 

*** Mini-Project!

We will do mini-projects! 
- Groups of 3-4 students
- Build a three-tier web application, with some bells and whistles!
  - Front-end, middleware, backend, storage, distributed,
    load-balancer, fault injection, \dots 
  - Deployment, CI/CD toolchains, \dots 
- Work on it, present it to class 


*** Work load 

- This is an 6 LP, 3+1 SWS lecture 
- 6 LP = 180 hours of total work
- 3+1 SWS:
  - 3 SWS lectures = 3 units / week * 45 minutes/unit * 15 weeks /
    semester = 22,5 time slots / semester (at 90 minutes)
  - 1 SWS homework = 1 units / week * 45 minutes/unit * 15 weeks /
    semester = 7,5 time slots / semester (at 90 minutes)
    - Roughly 3 of those for the mini projects
    - About 4,5 for conventional assignment discussions \textendash{} scheduled
      on demand  

*** Exam

- Oral or written exam
- We need to see number of participants 
   - To be decided during the first few lectures 
   - If written exam, date and time unclear 
 - Material of both lecture and assignments is relevant for the exam

*** Material

 - There will be no script (only  PDFs for slides) 
 - Slides will be available on the class web page prior to lecture (hopefully)
 - It cannot hurt to look at at least one of the recommended textbooks 

*** Textbooks
  
- No ideal textbook exists
- Good, but old fashioned:
  - Steen & Tanenbaum, Distributed systems
    \cite{Steen:DistributedSystems:2017}
  - Coulouris, Distributed Systems
    \cite{Coulouris:DistributedSystems:2011}  
- Lots of material online 


*** Cancelled classes, compensate for missed classes

- Future: Impossible to say at this point 
- Likely, some classes will be cancelled
- Plan an *additional* time slot right away? 

