** Model: distributed storage, distributed objects  

*** Distributed storage models 
 - Replicated storage 
 - Also: Caching (or deal with that already in client/server model?)  
*** Consistency model, update protocols 

 - Usual material from Tanenbaum, chapter 6. Serves as introduction to
   the problem
 - data-centric models 
 - Eventual consistency, client-centric models
 - quorums 
 - There is no "now" https://queue.acm.org/detail.cfm?id=2745385 


*** Reasons for replication
 Reliability
 - Continue to work even after crash 
 - With more replication, reliability can increase
 - Performance
 - Scale with numbers of requests, geographic area 
 - 
 - But: price to be paid
 - Overhead, costs 
 - Consistency
 - Intuition: “All
 - replicas are 
 - the same”
 - Out-of-date problems 
*** Object replication, not just data replication
 Consider data and their operations jointly in the replication discussion 
 - Starting point: Remotely invocable objects should be able to handle concurrent invocations
 - Option (a): by turning all methods into critical regions (like “synchronized” methods in Java) 
 - Option (b): Object is unaware of concurrency; hosting server process will handle it 
*** Object replication: responsible entity? 
 Approach 1: Object itself knows it can be replicated
 - No additional support from underlying system
 - Class/Object-specific strategies possible  
 Approach 2: Objects unaware of replication
 - Entails explicit support from a distribution system
 - E.g., to ensure that invocations are passed to all replicas 
 - More common, easier for developers  


** Data-centric consistency models 

*** Data-centric consistency models
 Basic model: Processes read 
 - or write data in a data store
 - Each process might have a local 
 - copy of each object “nearby” 
 - Write operations are propagated 
 - to all replicas 
 - 
 - Consistency model: A contract between processes and the data store 
 - If processes obey certain rules, the data store will work correctly (“as expected” by the processes), will ensure “consistency” 
 - 
 - Intuition: Read operation returns value of last write
 - But: without global clock, what is “last write”?
*** Strict consistency
 Strict consistency: 
 - 	Any read on a data item x returns a value corresponding to the result of the most recent write on x
 - Natural, obvious, but implies existence of global time 
 - Writes are instantaneously visible to all possible reads
 - As this model is common to uniprocessors, most programmers (more or less consciously) expect 
 - a system to behave like this 
 - Some obvious problems in replicated storage 
 - 
*** Notation for consistency examples

 - Process i writes value a to data item x: Wi(x)a 
 - Process i reads from data item x returning value b: Ri(x)b
 - Time shown horizontally, grows to the right 
 - 
 - Examples: 
 - 
 - 
 - 
 Strictly consistent behavior
 Not strictly consistent
*** Sequential consistency 
 Observation: Programmers are already used to pay attention to situations when order of events is important
 - Critical sections in concurrent programs, interleaving of threads, …
 - Use as justification to weaken the consistency model? 
 - 
 - Sequential consistency
 - 	The result of any execution is the same as if the (read and write) operations by all the processes on the data store were executed in some sequential order and the operations of each individual process appear in this sequence in the order specified by its program. 
 - Meaning: Any interleaving of reads and writes is acceptable, but all processes see the same interleaving!
*** Sequential consistency, example 
 Example 
 - 
 - 
 - 
 - 
 - 
 - 
 - 
 - Note: no notion of time in this definition!
 - 
 - (Note: sequential consistency related to transaction serializability )
*** Sequential consistency, example 2
 Processes:
 - 
 - 
 - 
 - Some possible executions (Signature= output of P1, P2, P3):
*** Getting weaker: Causal consistency 
 Sequential consistency still too strong, resulting in unacceptable performance
 - Need to weaken the promises made by the data store to the processes even more 
 - 
 - Causal consistency 
 - 	Necessary condition:
 - Writes that are potentially causally related must be seen by all processes in the same order.  Concurrent writes may be seen in a different order on different machines.
*** Causal consistency: Example
 Causal consistency: Example

 - 
 - 
 - 
 - 
 - 
 - 
 - This sequence is allowed with a causally-consistent store, but not with a sequentially or strictly consistent store
 - Note: W1(x)c and W2(x)b are concurrent, need not be ordered!
 - 
*** Causal consistency: Example 2

 Violating causal consistency
 Correct ordering in causal consistency
*** FIFO consistency 
 Causal consistency still requires same order for causally related writes 
 - Dropping even this requirement leads to: 
 - 
 - FIFO consistency 
 - 	Necessary Condition:
 - Writes done by a single process are seen by all other processes in the order in which they were issued, but writes from different processes may be seen in a different order by different processes.
 - 
*** FIFO consistency: Example 
 FIFO consistency: Example 
*** Weak consistency – Idea: synchronization variable
 Even FIFO is too strict for high performance
 - And it is not even necessarily required! 
 - Example
 - Process performs many writes within a critical sections
 - Other processes must not touch the written data until the writer has left the critical section 
 - So the order in which writes done inside this critical section happen is not relevant! 
 - Only after critical section has been left need other processes be informed 
 - Idea: Tell data store about such synchronization aspects
 - To relieve from needlessly attempting strong consistency 
 - Expressed via synchronization variables 
*** Weak consistency – Definition 
 Weak consistency 
 - 	Properties:
 - Accesses to synchronization variables associated with a data store are sequentially consistent
 - No operation on a synchronization variable is allowed to be performed until all previous writes have been completed everywhere
 - “Flush the pipeline”, force all writes 
 - No read or write operation on data items are allowed to be performed until all previous operations to synchronization variables have been performed.
 - 
 - Intuition: Spend a lot of effort on synchronization variables; use that to reduce overall effort – enforce consistency on a group of operations, not single read/write; consistency only holds at certain points in time  
*** Release consistency 
 Weak consistency does not distinguish between 
 - Starting a synchronized section Ã requires local copy to be brought up-to-date 
 - Ending a synchronized section Ã requires local changes to be put into all non-local replicas 
 - 
 - Release consistency distinguishes between acquire and release operation
 - Overcomes this shortcoming; allows distribution system to improve performance 
*** Release consistency – Definition 
 Release consistency
 - 
 - Rules:
 - Before a read or write operation on shared data is performed, all previous acquires done by the process must have completed successfully.
 - Before a release is allowed to be performed, all previous reads and writes by the process must have completed
 - Accesses to synchronization variables are FIFO consistent (sequential consistency is not required).
 - 
*** Entry consistency
 Observation: not every critical section needs all data to be consistent – only those that are actually used/modified 
 - Have acquire/release specify which data is to be synchronized 
 - 
 - Entry consistency 
 - An acquire access of a synchronization variable is not allowed to perform with respect to a process until all updates to the guarded shared data have been performed with respect to that process.
 - Before an exclusive mode access to a synchronization variable by a process is allowed to perform with respect to that process, no other process may hold the synchronization variable, not even in nonexclusive mode.
 - After an exclusive mode access to a synchronization variable has been performed, any other process's next nonexclusive mode access to that synchronization variable may not be performed until it has performed with respect to that variable's owner. 
 - 
*** Summary data-centric consistency models
 Joint characteristic: the stricter the synchronization requirement
 - The more convenient the programming model
 - The more overhead it causes in an implementation 
 - 
 - 
*** Some implementation ideas 
 26


** Client-centric consistency models 




*** Eventual consistency
 Typical situation 
 - Replicated data store; many users read, few users write
 - Only very few users allowed to write to specific data
 - Examples: DNS, WWW, many database applications 
 - 
 - Insight: in many such systems, it is acceptable to read out-of-date data (favor availability over consistency) 
 - Access to inconsistent data 
 - Trying to cast, e.g., WWW in the previous consistency models is pointless 
 - 
 - Reasonable goal: eventual consistency
 - 	In the absence of updates, all replicas converge 
 - toward identical copies of each other 
*** Eventual consistency
 Consider a mobile user accessing an eventually consistent replicated data store 
 - Write performed in one replica; move happens; reads data back from other replica ! Not what was written!
 - This client observes strange behavior! 
 Desirable: one client should see a consistent behavior
 - But behavior of different clients with respect to each other is ignored!
 -  ! Client-centric consistency 
 - Notation 
 - xi[t] : value of (replica of) x as stored at location Li at time t 
 - Write sequence WS (xi[t]) : series of writes by client resulting in xi[t]
 - If operations in WS (xi[t1]) have also happened at Lj at time t2, denote this as WS (xi[t1], xj[t2]) 



*** Monotonic reads
 Monotonic-read consistency 
 - 	If a process reads the value of a data item x, any successive read operation on x by that process will always return that same value or a more recent value
 - Irrespective of the replicas where these reads happen
 - Note that “more recent” is well defined, since there is only a single process involved 
 - Example: email mailbox, accessed by a mobile user 
 Monotonic-read
 - consistent
 Not monotonic-read
 - consistent
*** Monotonic writes 
 Monotonic-write consistency
 - 	A write operation by a process on a data item x 
 - is completed before any successive write operation 
 - on x by the same process
 - Irrespective of location where writes are issued
 - “Complete” refers to all involved replicas
 - “Successive” is well defined 
 - A write on a given copy is performed only if that copy has been brought up to date already with other writes (possibly issued at other locations) 
 - Example: Partial updates to a software library
 - Note: relationship to FIFO consistency! 
*** Monotonic writes 
 Monotonic-write consistent (W(x1) issued at L1, has to happen at L2 before W(x2) may take place)
 Not monotonic-write consistent (W(x1) is missing at L2 
 - before W(x2) happens)
*** Read your writes
 Read-your-writes consistency 
 - 	The effect of a write operation by a process on 
 - data item x will always be seen by a successive 
 - read operation on x by the same process 
 - Example: updating web page, web browser afterwards loads old version from local replica 
 - 
 Read your writes observed
 No read your writes behavior; 
 - updates W(x1) not reflected at L2
*** Writes follow reads
 Writes-follow-reads consistency 
 - 	A write operation by a process on a data item x following a previous read operation on x by the same process is guaranteed to take place on the same or a more recent value of x that was read. 
 - Writes are performed on versions of data item that is up to date at least with the value most recently read by the process 
 - Example: Newsgroup posting 
 Write-follows-reads consistent
 Not write-follows-reads consistent
*** Implementing client-centric consistency – Naïve version
 35
*** Implementing client-centric consistency – Improvements
 36
*** Overview
 Replication – Overview 
 - Data-centric consistency models
 - Client-centric consistency models
 - Distribution protocols
 - Consistency protocols
 - 
*** Replica placement
 Issue: Where, when, and by whom are replicas of data items placed? 
 - Permanent replicas
 - More or less static choice of replica sites; replicas not dropped 
 - Server-initiated replicas
 - Servers can detect popular items; start replication to other servers
 - Replicated items might be replicated, migrated, dropped
 - Client-initiated replicas
 - Clients initiate replication of items
 - Common options: cache at client site; some cache intermediate between client and some of the replicating servers (e.g., Web proxy) 
 - 
*** Update propagation
 Usually: update of data item initiated at some client, sent to nearest replica, from there onwards to all replicas of the data item 
 - What is sent?
 - Notification of update – invalidate other replicas 
 - Invalidation protocol
 - Usually suitable for small read/write ratios 
 - Transfer data from one copy to another
 - Usually suitable for large read/write ratios 
 - Propagate the update operations 
*** Pull vs. push update propagation protocols
 Push-based (or server-based) update propagation
 - Updates propagated by the site where they happen
 - Usually good for permanent or server-initiated replicas
 - Good when high degree of consistency needed
 - At high read/write ratios
 - Pull-based (or client-based)
 - Client checks whether data is valid
 - Hybrid: Leases
 - During a lease, server will push updates to replicating clients; afterwards, clients have to poll 
 Assumption: one server, several clients with their own cache each
*** Overview
 Replication – Overview 
 - Data-centric consistency models
 - Client-centric consistency models
 - Distribution protocols
 - Consistency protocols
 - 
*** Consistency protocols
 Let’s look at how to actually implement these consistency models! 
 - By a consistency protocol, specific to a given model 
 - 
 - Main classification: Is there a primary copy of each data item or not? 
 - Possibly supported by additional backup replicas 
 - With primary, a natural place for coordinating write operations exists 
 - With primary copy: Is the primary copy fixed to one server, or can it be moved? 
 - Without primary copy: involve all or only some of the replicas? 
 - 
*** Primary-based protocols: Remote-write protocols
 No replication at all, all writes happen only at a single replica 
 - Client/server
 - Obvious performance problems
 - 
 - Primary-backup protocols
 - Write operations only at a single copy
 - Multiple copies for local reads 
 - Obvious performance & fault-tolerance problems
 - Both implement sequential consistency
*** Primary-based protocols: Local-write protocols
 Option 1: single copy of each data item, but is transferred to the process that wants to write 
 - Consistency is straightforward
 - Issue: Keep track of where each data item is at any one point in time 
 - Forwarding pointers, hierarchical location services 
 - Option 2: migrate primary, but support it by backup replicas 
 - Write locally, reads can continue on remote replicas 
*** Replicated-Write protocols: Active replication 
 Replicated-Write protocols: Active replication 
 Idea: Forward a write operation to all replicas 
 - Depending on required consistency model, writes have to be synchronized between different replicas
 - Centralized: sequencer (very similar to primary-based protocols)
 - Distributed ordering of requests: E.g., use the CBCAST protocol to implement causal consistency model!
 - Or which ever multicast ordering fits the need 
 - Additional problem: What about replicated invocations? 
*** Replicated-Write protocols: Active replication
 Dealing with replicated invocations in general is difficult
 - One approach 
 - Each invocation from one replicated object to another one is assigned a unique identifier by all invoking replicas 
 - Only coordinator replica of invoking object actually sends out the invocation, to all replicas of the invoked object 
 - Use same mechanism to return only a single answer 
 - Sender-based multicast scheme; alternatives possible 
*** Replicated-Write protocols: Quorum-based protocols
 Use voting among replicas, instead of involving all replicas into each update decision 
 - 
 - Idea: before reading or writing to a data item, more than half the servers must be contacted
 - Servers send version number
 - Updates increase version number
 - Read only possible if version numbers agree/latest version number from this set is used  
*** Replicated-Write protocols: Quorum-based protocols
 More generally: distinguish read and write quorums
 - N servers in total 
 - To read: get a read quorum NR
 - To write: get a write quorum NW 
 - It must hold:
 - NR + NW > N  and  NW > N/2 
 - 
 Possible write conflict!
 Read-One, Write-All 
 - scheme (ROWA)
 Note: Just one possible way to determine quorums. 
 - Many alternatives exist!
** Consistency protocols – Summary 
Consistency protocols necessary to ensure desired level of consistency between replicas
- How are replicas handled?
- How are updates distributed? 
- Missing: cache-coherence protocols

